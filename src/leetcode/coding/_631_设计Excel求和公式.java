package leetcode.coding;

import java.util.PriorityQueue;

/**
 * 首先我们肯定需要一个二维数组mat来保存数据，然后需要一个map来建立单元格和区域和之间的映射
 * 这里的区域和就是sum函数中的字符串数组表示的内容，可参见题目中的例子，有可能单个单元格或者多个。
 *
 * set函数
 *      如果我们改变了某个单元格的内容，那么如果作为结果单元格，那么对应的链接就会断开。
 *      比如我们有三个单元格A1, B1, C1，我们设置的关联是A1 + B1 = C1，那么我们改变A1和B1的值都是OK的，C1的值会自动更新。
 *      但如果我们改变了C1的值，那么这个关联就不复存在了，Excel中也是这样的。所以我们在改变某个单元格的时候，要将其的关联删除。
 * get函数
 *      我们在获取某个单元格的值的时候，一定要先看其有没有和其他单元格关联，如果有的话，要重新计算一下关联
 *      有可能关联的单元格的值已经发生改变了，那么当前作为结果单元格的值也需要改变；
 *      如果该单元格没有任何关联，那么就直接从数组mat中取值即可。
 *
 * sum函数
 *      要根据关联格求出结果格的值，首先这个字符串数组可能有多个字符串，每个字符串有两个可能
 *      一种是单个的单元格，一种是两个单元格中间用冒号隔开。
 *      那么我们需要分情况讨论，区别这两种情况的方法就是看冒号是否存在
 *      如果不存在，就说明只有一个单元格，我们将其数字和字母都提取出来，调用get函数，将该位置的值加入结果res中；
 *      如果冒号存在，我们根据冒号的位置，分别将两个单元格的字母和数字提取出来，然后遍历这两个单元格之间所有的单元格，调用get函数并将返回值加入结果res中。
 *      这个遍历相加的过程可能可以用树状数组来优化，但由于这不是此题的考察重点，所以直接遍历就OK。
 *      最后别忘了建立目标单元格和区域字符串数组之间的映射，并返回结果res即可。
 */
// public class _631_设计Excel求和公式 {
//
//     class Excel {
//
//         // 输入 Excel 的高度和宽度，H，高度范围在1-26，W是一个字符，范围从'A'到'Z'，宽度等于从'A'到W的字符个数
//         // Excel表格是一个高度 * 宽度的二维整数数组，所有元素初始化为0，第一行下标从1开始，第一列从'A'开始
//         public Excel(int H, char W) {
//
//         }
//
//         // 设置 excel(row, column) 中的值为 v。
//         public void set(int r, char c, int v) {
//
//         }
//
//         // 返回 excel(row, column) 中的值。
//         public int get(int r, char c) {
//
//         }
//
//         // 这个函数会将计算的结果放入 excel(row, column)中，计算的结果等于在 strs 中代表的所有元素之和
//         // strs是若干字符串的集合，每个字符串代表单个位置或一个区间。
//         // 如果字符串表示单个位置，它的格式如下：ColRow，例如 "F7" 表示位置 (7, F)
//         // 如果字符串表示一个区间，它的格式如下：ColRow1:ColRow2。区间就是左上角为 ColRow1 右下角为 ColRow2 的长方形。
//         public int sum(int r, char c, String[] strs) {
//             PriorityQueue<Object> pq = new PriorityQueue<>();
//
//
//         }
//     }
// }