package leetcode.coding;

/**
 * 不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。
 *
 * 思路：普通的异或运算，实际上就是加法，只不过没有实现进位的机制，比如a = 5 = 0101 ，b = 4 = 0100，a^b= 0001
 *      所以我们要做的就是实现进位机制，使用&来实现异或机制， a & b = 0100，但是并不是我们想要的，需要再左移一位
 *
 * 首先看十进制是如何做的： 5+7=12，三步走
 * 第一步：相加各位的值，不算进位，得到2。
 * 第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。
 * 第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。
 *
 * 同样我们可以用三步走的方式计算二进制值相加： 5---101，7---111
 *
 * 第一步：相加各位的值(异或操作)，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。
 * 第二步：计算进位值，得到1010，相当于各位进行与操作得到101，再向左移一位得到1010，(101&111)<<1。
 * 第三步重复上述两步，各位相加 010^1010=1000，进位值为100=(010 & 1010)<<1。
 * 继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。
 * 结束条件：进位为0，即a为最终的求和结果。
 *
 */
public class _371_两整数之和 {

    public int getSum(int a, int b) {
        while (b != 0) {
            int temp = a ^ b;   //相加各位的值
            b = (a & b) << 1;   //计算进位的值
            a = temp;   //让a作为temp（相加各位的值的结果），再和b（进位）去异或，就是相加操作，只要进位不为0，这个循环就一直进行下去
        }
        return a;
    }
}