package leetcode.coding;

/**
 * 非常经典的面试问题
 *
 * 思路：这个题目是说，给定一栋楼1-N层，给K个鸡蛋，从第F层扔下这个鸡蛋，鸡蛋不会破，求能够确定F的最大值的最少移动次数是多少
 *      也就是从F+1层扔下去鸡蛋会破
 *
 *      这个问题得需要转化，就是给定N层楼，K个鸡蛋，扔 T 次，可以确定多少个区间
 *      这个区间很好懂
 *      比如： 1 层楼， 1 层碎了（F < 1），1 层没碎 （1 <= F）
 *      比如： 2 层楼，有 1 层碎了（F < 1）， 1 层没碎但 2 层碎了（1 <= F < 2）， 2 层没碎（2 <= F）
 *
 *      当只有 1 次机会时，无论有多少个蛋，你能测试出的楼层都只有 2 层。
 *      其他情况时，递归。【可以测试的区间】 == 【蛋碎了减 1 个，机会减 1 次】 + 【蛋没碎，机会减 1 次】
 *
 * 面试问题
 *      有 2 个蛋，用一座 100 层的楼，要使用最少次数测试出蛋几层会碎（F）。
 *      问第一次应该从几层扔。
 * 分析
 *      本质上是和本题是一样的。
 *      int ans = superEggDrop(2, 100);得到 14 次。
 *      最少需要 14 次，所以第 1 次扔在 14 层，如果蛋碎了，接下来 1~13 这个区间就只能一次一次尝试了。
 *      接下来第二次扔蛋，因为扔过 1 次了，接下来的区间大小只有 12 ，只能够 15~26 ，所以扔到 27 层。
 *      考虑到上面分析，推到最后一次，即区间大小是 0 ，再往前一次，区间大小是 1 。
 *      所以在蛋的数量固定为 2 的情况下，次数和楼层的关系应该是
 *      扔 1 次，覆盖 1 层。
 *      扔 2 次，覆盖 3 层。
 *      扔 3 次，覆盖 6 层。
 *      即：1 + 2 + 3 + ... + 14 > 100 所以答案是 14 次。
 */
public class _887_鸡蛋掉落 {

    //K个鸡蛋，N层楼
    public int superEggDrop(int K, int N) {
        int cnt = 1;    //最少需要测几次
        //当还没测完这N层时，就给我一直测
        while (helper(K, cnt) <= N) {
            cnt++;
        }
        return cnt;
    }

    // 计算 K 个鸡蛋，扔 T 次，可以覆盖多少个区间
    private int helper(int K, int T) {
        //如果只能扔1次，只能测出两个区间
        if (T == 1) return 2;
        //如果只有一个鸡蛋了，能扔T次，可以确定T+1个区间
        if (K == 1) return T + 1;
        //鸡蛋碎了和鸡蛋没碎两种情况
        return helper(K - 1, T - 1) + helper(K, T - 1);
    }


}