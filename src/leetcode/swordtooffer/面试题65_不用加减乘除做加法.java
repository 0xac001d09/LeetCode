package leetcode.swordtooffer;

public class 面试题65_不用加减乘除做加法 {

    /**
     * 不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。
     *
     * 对应力扣371题
     *
     * 思路：普通的异或运算，实际上就是加法，只不过没有实现进位的机制，比如a = 5 = 0101 ，b = 4 = 0100，a^b= 0001
     *      所以我们要做的就是实现进位机制，使用 & 来实现异或机制， a & b = 0100，但是并不是我们想要的，它需要再左移一位。
     *      然后我们再用进位和之前异或的值相加，得到一个新的结果，再算进位，再异或。。。这样下去直到进位为0即可。这么说有点晕，举个例子
     *
     * 比如 4（100） + 7 （111）
     *  1、先做异或运算，加法 4^7 = 011
     *  2、求进位,与运算左移一位, 4 & 7 << 1 得到 1000
     *  3、重复上面两步，直到进位为0
     *      3.1 1000 ^ 011 = 1011
     *      3.2 1000 & 011 << 1 得到 0
     *      3.3 进位为0 结束
     */
    public int add(int a, int b) {
        while (b != 0) {
            int temp = a ^ b;   //相加各位的值
            b = (a & b) << 1;   //计算进位的值 要加括号！ 因为位移优先级更高
            a = temp;   //让a作为temp（相加各位的值的结果），再和b（进位）去异或，就是相加操作，只要进位不为0，这个循环就一直进行下去
        }
        return a;
    }
}